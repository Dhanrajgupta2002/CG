Exp 1 : Write C++ program to draw a concave polygon and fill it with desired
color using scan fill algorithm. Apply the concept of inheritance


/* Write C++ program to fill polygon using scan line algorithm*/

#include<graphics.h>
#include<iostream>
#include<stdlib.h>
#include<math.h>
using namespace std;

class polygon
{
	public:
		int x[10],y[10];
		int min_y,max_y,y_val;
		int n,i;
		int cnt;
		float m[20],xint[200];
		void draw_poly();
		void scanline();
		void sort(float[],int);
		void floodfill(int,int,int,int);
		void boundaryFill(int,int,int,int);
		
};


void polygon::draw_poly()
{
	cout<<"\nEnter no of vertices";
	cin>>n;

	if(n<3)
	{
		cout<<"\nError";
		exit(0);
	}

	else
	{
		for(i=0;i<n;i++)
		{
			cin>>x[i];
			cin>>y[i];
		}

		x[n]=x[0];
		y[n]=y[0];

		for(i=0;i<n;i++)
		{
			line(x[i],y[i],x[i+1],y[i+1]);
		}
	}
}

void polygon::scanline()
{
	draw_poly();
	setcolor(BLUE);
	min_y=480;
	max_y=0;

	for(i=0;i<n;i++)
	{
		if(min_y >= y[i])
			min_y=y[i];
		
		if(y[i]>= max_y)
			max_y=y[i];
		
		int dx=x[i+1]-x[i];
		int dy=y[i+1]-y[i];

		if(dx==0)
		{
			m[i]=0;
		}
		else if(dy==0)
		{
			m[i]=1;
		}
		else
		{
			m[i]=(dy/dx);
		}
		
	}
	
	for(y_val= max_y ;y_val>= min_y ;y_val--)
	{
		cnt=0;

		for(i=0;i<n;i++)
		{
			if((y[i]>y_val && y[i+1]<=y_val) || (y[i]<=y_val && y[i+1]>y_val))
			{
				if (m[i]!=0)

					xint[cnt]=x[i]+((y_val-y[i])*m[i]);
				else
					xint[cnt]=x[i];

			cnt++;

			}
		}

		sort(xint,cnt);

		for(int k=0;k<cnt-1;k=k+2)
		{
			line(xint[k],y_val,xint[k+1],y_val);
			delay(50);
		}
	}

}

void polygon::sort(float xint[],int cnt)
{
	float temp;
	for(int i=0;i<cnt;i++)
	{
		for(int j=0;j<cnt-1;j++)
		{
			if(xint[i] > xint[j])
			{
				temp=xint[j];
				xint[j]=xint[j+1];
				xint[j+1]=temp;
			}
		}
	}
}


void polygon::floodfill(int x,int y,int new_color,int old_color)		                      // also called as SeedFill
{ 
    if (getpixel(x,y) == old_color) 						 
    { 	
        putpixel(x,y,new_color); // put new pixel with new color 
  
        floodfill(x+1,y,new_color,old_color); 
  	  floodfill(x-1,y,new_color,old_color); 
  	  floodfill(x,y+1,new_color,old_color); 
  	  floodfill(x,y-1,new_color,old_color); 
    }

}

void polygon::boundaryFill(int x, int y, int new_color,int     old_color)
{
    if(getpixel(x,y) != old_color && getpixel(x,y) != new_color)
    {
        putpixel(x,y,new_color);
        boundaryFill(x+1,y,new_color,old_color);
        boundaryFill(x,y+1,new_color,old_color);
        boundaryFill(x-1,y,new_color,old_color);
        boundaryFill(x,y-1,new_color,old_color);
    }
}

int main()
{
	int gd = DETECT,gm;
	int new_color,x,y,ch;
	
	initgraph(&gd,&gm,NULL);
	
	polygon p;
	do
	{
		cout<<"\n1.Scanline algorithm\n2.Floodfill algorithm\n3.Boundaryfill algorithm";

		cout<<"\nEnter choice";
		cin>>ch;

		switch(ch)
		{
			case 1:
				p.scanline();
				break;

			case 2:
				p.draw_poly();
				cout<<"\nEnter x and y ";
				cin>>x>>y;
				p.floodfill(x,y,BLUE,BLACK);			
				break;

			case 3:
				p.draw_poly();
				cout<<"\nEnter x and y ";
				cin>>x>>y;
				p.boundaryFill(x,y,YELLOW,15);
				break;

			default:
				cout<<"\nEnter valid choice";
		}

	}while(ch<4);
	
	getch();
	closegraph();
	return 0;
}

/====================================================================================================

Exp 2 : Write C++ program to implement Cohen Southerland line clipping
algorithm.


/* Write C++ program to implement Cohen-Sutherland line clipping algorithm.
*/

#include<iostream>
#include<graphics.h>

using namespace std;


class lineClip {

	int RIGHT = 2,LEFT = 1,TOP = 8,BOTTOM = 4;
	int x1,x2,y1,y2,xl,yl,xh,yh,x,y;
public : 
	int getcode(int x,int y);
	void process();
};

int lineClip :: getcode(int x,int y) {
	int code = 0;
	if(y>yh)
		code |= TOP;
	if(y<yl)			
		code |= BOTTOM;
	if(x<xl)
		code |= LEFT;
	if(x>xh)
		code |= RIGHT;
	return code;
}


void lineClip :: process() {
int code1,code2;

cout<<"\n Enter the botttom left and upper right coordinate of the rectangle : ";
cin>>xl>>yl>>xh>>yh;

setcolor(YELLOW);
rectangle(xl,yl,xh,yh);

cout<<"\n Enter the line coordinate :";
cout<<"\n Starting Coordinate :";
cin>>x1>>y1;
cout<<"\n Ending coordinate : ";
cin>>x2>>y2;

setcolor(WHITE);
line(x1,y1,x2,y2);
delay(1000);

code1 = getcode(x1,y1);
code2 = getcode(x2,y2);
int temp;

float m;
int flag = 0;
while(1) {
	m = (float)(y2-y1)/(x2-x1);
	
	if(code1 == 0 && code2 ==0) 
	{
		flag = 1;
		break;	
	} 
	else if((code1 & code2) != 0)
	{
		break;
	} 
	else {
		if(code1 == 0)
			temp = code2;
		else
			temp = code1;
		
		if(temp & TOP) {
			x = x1 + (yh-y1)/m;
			y = yh;
		}
		else if(temp & BOTTOM) {
			x = x1 + (yl-y1)/m;
			y = yl;	
		}
		else if(temp & LEFT){
			y = y1 + m*(xl-x1);
			x = xl; 	
		}
		else if(temp & RIGHT){
			y = y1 + m*(xh-x1);
			x = xh; 	
		}
		if(temp == code1){
			x1 = x;
			y1 = y;
			code1 = getcode(x1,y2);  
		}else {
			x2 = x;
			y2 = y;
			code2 = getcode(x2,y2);
		}
	}
}
cleardevice();
rectangle(xl,yl,xh,yh);
setcolor(YELLOW);

if(flag == 1)
	line(x1,y1,x2,y2);
getch();
closegraph();


}


int main() 
{
int gd = DETECT,gm;
initgraph(&gd,&gm,NULL);
lineClip l1;
l1.process();
return 0;
}

//or

/*
7. Write C++ program to implement Cohen Southerland line clipping algorithm.
*/


//#include<iostream.h>
//#include<conio.h>
//#include<graphics.h>
//#include<math.h>
//void Window()
//{
	//line (200,200,350,200);
	//line(350,200,350,350);
	//line(200,200,200,350);
	//line(200,350,350,350);
//}
//void Code(char c[4],float x,float y)
//{        c[0]=(x<200)?'1':'0';
	 //c[1]=(x>350)?'1':'0';
	 //c[2]=(y<200)?'1':'0';
	 //c[3]=(y>350)?'1':'0';
//}
//void Clipping  (char c[],char d[],float &x,float &y,float m)
//{
	//int flag=1,i=0;
	//for (i=0;i<4;i++)
	//{
		//if(c[i]!='0' && d[i]!='0')
		//{
			//flag=0;
			//break;
		//}
		//if(flag)
		//{
			//if(c[0]!='0')
			//{
				//y=m*(200-x)+y;
				//x=200;
			//}
			//else if(c[1]!='0')
			//{
				//y=m*(350-x)+y;
				//x=350;
			//}
			//else if(c[2]!='0')
			//{
				//x=((200-y)/m)+x;
				//y=200;
			//}
			//else if(c[3]!='0')
			//{
				//x=((350-y)/m)+x;
				//y=350;
			//}
		//}
		//if (flag==0)
			//cout<<"Line lying outside";
	//}
//}
//void main()
//{
//int gdriver = DETECT, gmode, errorcode;
//float x1,y1,x2,y2;
//float m;
//char c[4],d[4];
//clrscr();
//initgraph(&gdriver, &gmode, "//Turboc3//bgi");
//cout<<"Enter coordinates";
//cin>>x1>>y1>>x2>>y2;
//cout<<"Before clipping";
//Window();
//line(x1,y1,x2,y2);
//getch();
//cleardevice();
//m=float((y2-y1)/(x2-x1));
//Code(c,x1,y1);
//Code(d,x2,y2) ;
//Clipping(c,d,x1,y1,m);
//Clipping(d,c,x2,y2,m);
//cout<<"After Clipping";
//Window();
//line(x1,y1,x2,y2);
//getch();
//closegraph();
//}

/==============================================================================

Exp 3 : Write C++ program to draw the following pattern. Use DDA line and
Bresenhamâ€˜s circle drawing algorithm. Apply the concept of
encapsulation.


#include<iostream>
#include<stdlib.h>
#include<math.h>
#include<graphics.h>
using namespace std;

int sign(float x) {
    if (x < 0)
        return -1;
    else if (x > 0)
        return 1;
    else
        return 0;
}

void drawline(int x1, int y1, int x2, int y2) {
    float dx, dy, len, xnew, ynew, x, y;

    dx = abs(x2 - x1);
    dy = abs(y2 - y1);

    if (dx > dy)
        len = dx;
    else
        len = dy;

    xnew = dx / len;
    ynew = dy / len;

    x = x1 + 0.5;
    y = y1 + 0.5;

    for (int i = 1; i <= len; i++) {
        putpixel(x, y, 10);

        if (sign(x2 - x1) == 1)
            x = x + xnew;
        else
            x = x - xnew;

        if (sign(y2 - y1) == 1)
            y = y + ynew;
        else
            y = y - ynew;
    }
}

// Other functions (mh, md, mv) remain the same...

int main() {
    int gd = DETECT, gm;

    initgraph(&gd, &gm, NULL);
    drawline(100, 250, 300, 250);
    drawline(100, 250, 200, 76);
    drawline(200, 76, 300, 250);
    drawCircle(200, 193, 57);
    // Other drawline and drawCircle calls are commented out as per the provided code.

    getch();
    delay(2000);
    closegraph();
    return 0;
}





//or

/*


#include<iostream>
#include<graphics.h>
#include<math.h>

int sign(int x) {
    if(x<0)
        return -1;
    else if(x>0)
        return 1;
    else
        return 0;
}

void bline(int x1, int y1, int x2, int y2, int col) {
    int dx, dy, e, x, y, i=1;
    dx = x2 - x1;
    dy = y2 - y1;
    x = x1;
    y = y1;
    e = 2 * dy - dx;
    while(i <= dx) {
        while(e >= 0) {
            y++;
            e = e - 2 * dx;
        }
        x++;
        e = e + 2 * dy;
        putpixel(x, y, col);
        i++;
    }
}

void ddaline(int x1, int y1, int x2, int y2, int col) {
    int x, y, len, i;
    float dx, dy;
    if(x1 == x2 && y1 == y2)
        putpixel(x1, y1, col);
    else {
        dx = abs(x2 - x1);
        dy = abs(y2 - y1);
        if(dx > dy)
            len = dx;
        else
            len = dy;
        dx = (x2 - x1) / len;
        dy = (y2 - y1) / len;
        x = x1 + 0.5 * sign(dx);
        y = y1 + 0.5 * sign(dy);
        i = 1;
        while(i < len) {
            putpixel(x, y, col);
            x = x + dx;
            y = y + dy;
            i++;
        }
    }
}

int main() {
    int ch, col, x1, x2, y1, y2;
    std::cout << "\n------------MENU------------\n";
    std::cout << "1.USING DDA\n";
    std::cout << "2.Using Bresenham's\n";
    std::cout << "\nEnter your choice : \n";
    std::cin >> ch;
    std::cout << "\nEnter points x1,y1,x2,y2 : \n";
    std::cin >> x1 >> y1 >> x2 >> y2;
    std::cout << "\nEnter colour 1-15 : \n";
    std::cin >> col;
    if(col > 15 || col < 1)
        col = 1;

    int gd = DETECT, gm;
    initgraph(&gd, &gm, "c:\\turboc3\\bgi");

    switch(ch) {
        case 1:
            ddaline(x1, y1, x2, y2, col);
            ddaline(300, 300, 400, 300, col);
            ddaline(300, 300, 300, 400, col);
            ddaline(300, 400, 400, 400, col);
            ddaline(400, 400, 400, 300, col);
            break;
        case 2:
            bline(x1, y1, x2, y2, col);
            ddaline(300, 300, 400, 300, col);
            ddaline(300, 300, 300, 400, col);
            ddaline(300, 400, 400, 400, col);
            ddaline(400, 400, 400, 300, col);
            break;
        default :
            std::cout << "\nEnter valid choice :\n";
    }

    getch();
    closegraph();
    return 0;
}

/*

/===========================================================================

Exp 4 : Write C++ program to draw 2-D object and perform following basic
transformations, Scaling, Translation, and Rotation. Apply the concept
of operator overloading.


/*Write C++ program to draw 2-D object and perform following basic transformations -
a) Scaling
b) Translation
c) Rotation
Use operator overloading.*/


#include <iostream>
#include <graphics.h>
#include <math.h>
using namespace std;

void display(int n, float c[][3])
{
	float maxx, maxy;
	int i=0;
	maxx=getmaxx();
	maxy=getmaxy();
	maxx=maxx/2;
	maxy=maxy/2;

	//draw polygon

	while(i<n-1)
	{
		line(maxx+c[i][0], maxy-c[i][1],maxx+c[i+1][0],maxy-c[i+1][1]);
		i++;
	}

	i=n-1;

	line(maxx+c[i][0],maxy-c[i][1],maxx+c[0][0],maxy-c[0][1]);
    delay(1000);

	//draw X-Y axis
	setcolor(WHITE);
	line(0,maxy,maxx*2,maxy);
	line(maxx,0,maxx,maxy*2);
	setcolor(WHITE);
}

void mult(int n,float b[][3], float c[][3],float a[][3])
{
	int i,j,k;
	for(i=0;i<n;i++)
		for(j=0;j<3;j++)
			a[i][j]=0;

	for(i=0;i<n;i++)
		for(j=0;j<3;j++)
			for(k=0;k<3;k++)
				a[i][j]+=(c[i][k]*b[k][j]);
}

void translation(int n,float c[][3],float tx,float ty)
{
	float b[10][3], a[10][3];
	int i=0,j;
	for(i=0;i<3;i++)
		for(j=0;j<3;j++)
			b[i][j]=0;
	b[0][0]=1;
	b[1][1]=1;
	b[2][2]=1;
	b[2][0]=tx;
	b[2][1]=ty;
	
	mult(n,b,c,a);
	setcolor(YELLOW);
	display(n,a);
	getch();
}

void scaling(int n,float c[][3],float sx,float sy)
{
	float b[10][3], a[10][3];
	int i=0,j;
	for(i=0;i<3;i++)
		for(j=0;j<3;j++)
			b[i][j]=0;
	b[0][0]=sx;
	b[1][1]=sy;
	b[2][2]=1;
	mult(n,b,c,a);
	setcolor(YELLOW);
	display(n,a);
}

void rotation(int n,float c[][3], float ra)
{
	int i=0,j;
	float A;
	float b[10][3], xp,yp,a[10][3];
	xp=c[0][0];
	yp=c[0][1];
	for(i=0;i<3;i++)
		for(j=0;j<3;j++)
			b[i][j]=0;
	A=(ra*3.14)/180;
	b[0][0]=b[1][1]=cos(A);
	b[0][1]=sin(A);			//anticlockwise
	b[1][0]=-sin(A);
	b[2][0]=(-xp * cos(A)) + (yp * sin(A)) + xp;
	b[2][1]=(-xp * sin(A)) - (yp * cos(A)) + yp;
	b[2][2]=1;
	mult(n,b,c,a);
	setcolor(YELLOW);
	display(n,a);
}

int main()
{
	int i,ch,n,gd,gm;
	gd=DETECT;
	float c[10][3],tx,ty,sx,sy,ra;

	initgraph(&gd,&gm,NULL);
	cout<<"\nEnter the number of vertices: ";
	cin>>n;

	for(i=0;i<n;i++)
	{
		cout<<"Enter the co-ordinates of vertex "<<i+1<<":";
		cin>>c[i][0]>>c[i][1];
		c[i][2]=1;
	}

	do
	{
		cleardevice();
	cout<<"\n\n------------2-D Transformation-------------";
	cout<<"\n1.Translation\n2.Scaling\n3.Rotation\n4.Exit";
      cout<<"\n enter your choice - " ;
		cin>>ch;

	  switch(ch)
	{
	  case 1: cout<<"\nEnter Translation factors tx and ty:";
					cin>>tx>>ty;
					cleardevice();
					setcolor(CYAN);
					display(n,c);
					translation(n,c,tx,ty);
					//getch();
					break;

	case 2: cout<<"\nEnter the scaling factors sx and sy:";
					cin>>sx>>sy;
					cleardevice();
					setcolor(CYAN);
					display(n,c);
					scaling(n,c,sx,sy);
					break;

		case 3: cout<<"\nEnter the angle for rotation: ";
					cin>>ra;
					cleardevice();
					setcolor(CYAN);
					display(n,c);
					rotation(n,c,ra);
					//getch();
					break;

			case 4: cout<<"\nYou are out of the program !";
					break;

			default: cout<<"\nEnter valid choice !";
					break;

		}

	}while(ch!=4);

	return 0;
getch();
closegraph();
}


//or

/*
/*Write C++/Java program to draw 2-D object and perform following basic transformations, 
a) Scaling 
b) Translation 
c) Rotation 
Use operator overloading. */
/*
#include<iostream>
#include<stdlib.h>
#include<graphics.h>
#include<math.h>

using namespace std;

class POLYGON
{
    private:
        int p[10][10],Trans_result[10][10],Trans_matrix[10][10];
        float Rotation_result[10][10],Rotation_matrix[10][10];
        float Scaling_result[10][10],Scaling_matrix[10][10];
        float Shearing_result[10][10],Shearing_matrix[10][10];
        int Reflection_result[10][10],Reflection_matrix[10][10];

    public:
	int accept_poly(int [][10]);
	void draw_poly(int [][10],int);
	void draw_polyfloat(float [][10],int);
	void matmult(int [][10],int [][10],int,int,int,int [][10]);
	void matmultfloat(float [][10],int [][10],int,int,int,float [][10]);
	void shearing(int [][10],int);
	void scaling(int [][10],int);
	void rotation(int [][10],int);
	void translation(int [][10],int);
	void reflection(int [][10],int);
};

int POLYGON :: accept_poly(int p[][10])
{
	int i,n;
	cout<<"\n\nEnter number of vertices : ";
	cin>>n;
	for(i=0;i<n;i++)
	{
		cout<<"\n\nEnter (x,y) Co-ordinate of point P"<<i<<" : ";
		cin >> p[i][0] >> p[i][1];
		p[i][2] = 1;
	}
	
	for(i=0;i<n;i++)
	{
		cout<<"\n";
		for(int j=0;j<3;j++)
		{
			cout<<p[i][j]<<"\t\t";
		}
	}

	return n;
}
void POLYGON :: draw_poly(int p[][10], int n)
{
	int i,gd = DETECT,gm;
	initgraph(&gd,&gm,NULL);
	line(320,0,320,480);
	line(0,240,640,240);

	for(i=0;i<n;i++)
	{
		if(i<n-1)
		{
			line(p[i][0]+320, -p[i][1]+240, p[i+1][0]+320, -p[i+1][1]+240);
			
		}		
		else
			line(p[i][0]+320, -p[i][1]+240, p[0][0]+320, -p[0][1]+240);
	}
	

	
}

void POLYGON :: draw_polyfloat(float p[][10], int n)
{
	int i,gd = DETECT,gm;
	initgraph(&gd,&gm,NULL);
	line(320,0,320,480);
	line(0,240,640,240);

	for(i=0;i<n;i++)
	{
		if(i<n-1)
		{
			line(p[i][0]+320, -p[i][1]+240, p[i+1][0]+320, -p[i+1][1]+240);
			
		}		
		else
			line(p[i][0]+320, -p[i][1]+240, p[0][0]+320, -p[0][1]+240);
	}
	
	
}


void POLYGON :: translation(int p[10][10],int n)
{
	int tx,ty,i,j; int i1,j1,k1,r1,c1,c2;
        r1=n;c1=c2=3;
	cout << "\n\nEnter X-Translation tx : ";
	cin >> tx;
	cout << "\n\nEnter Y-Translation ty : ";
	cin >> ty;
	for(i=0;i<3;i++)
	for(j=0;j<3;j++)
		Trans_matrix[i][j] = 0;
	Trans_matrix[0][0] = Trans_matrix[1][1] = Trans_matrix[2][2] = 1;
	Trans_matrix[2][0] = tx;
	Trans_matrix[2][1] = ty;
   
	for(i1=0;i1<10;i1++)
	for(j1=0;j1<10;j1++)
		Trans_result[i1][j1] = 0;
	for(i1=0;i1<r1;i1++)
	for(j1=0;j1<c2;j1++)
	for(k1=0;k1<c1;k1++)
		Trans_result[i1][j1] = Trans_result[i1][j1]+(p[i1][k1] * Trans_matrix[k1][j1]);
	cout << "\n\nPolygon after Translation : ";
	draw_poly(Trans_result,n);
}

void POLYGON :: rotation(int p[][10],int n)
{
	float type,Ang,Sinang,Cosang;
        int i,j; int i1,j1,k1,r1,c1,c2;
        r1=n;c1=c2=3;
	cout << "\n\nEnter the angle of rotation in degrees : ";
	cin >> Ang;
	cout << "\n\n* * * * Rotation Types * * * *";
	cout << "\n\n1.Clockwise Rotation \n\n2.Anti-Clockwise Rotation ";
	cout << "\n\nEnter your choice(1-2): ";
	cin >> type;
	Ang = (Ang * 6.2832)/360;
	Sinang = sin(Ang);
	Cosang = cos(Ang);
          cout<<"Mark1";
	for(i=0;i<3;i++)
	for(j=0;j<3;j++)
		Rotation_matrix[i][j] = 0;
        cout<<"Mark2";
	Rotation_matrix[0][0] = Rotation_matrix[1][1] = Cosang;
	Rotation_matrix[0][1] = Rotation_matrix[1][0] = Sinang;
	Rotation_matrix[2][2] = 1;
	if(type == 1)
		Rotation_matrix[0][1] = -Sinang;
	else
		Rotation_matrix[1][0] = -Sinang;
	
        for(i1=0;i1<10;i1++)
	for(j1=0;j1<10;j1++)
		Rotation_result[i1][j1] = 0;
	for(i1=0;i1<r1;i1++)
	for(j1=0;j1<c2;j1++)
	for(k1=0;k1<c1;k1++)
		Rotation_result[i1][j1] = Rotation_result[i1][j1]+(p[i1][k1] * Rotation_matrix[k1][j1]);

	cout << "\n\nPolygon after Rotation : ";
        for(i=0;i<n;i++)
	{
		cout<<"\n";
		for(int j=0;j<3;j++)
		{
			cout<<Rotation_result[i][j]<<"\t\t";
		}
	}
	draw_polyfloat(Rotation_result,n);
}

void POLYGON :: scaling(int p[][10],int n)
{
	float Sx,Sy;
        int i,j; int i1,j1,k1,r1,c1,c2;
        r1=n;c1=c2=3;
	cout<<"\n\nEnter X-Scaling Sx : ";
	cin>>Sx;
	cout<<"\n\nEnter Y-Scaling Sy : ";
	cin>>Sy;
        
	for(i=0;i<3;i++)
	{
		for(j=0;j<3;j++)
		{	
			Scaling_matrix[i][j] = 0;
		}
	}

	Scaling_matrix[0][0] = Sx;
	Scaling_matrix[0][1] = 0;
	Scaling_matrix[0][2] = 0;
	Scaling_matrix[1][0] = 0;
	Scaling_matrix[1][1] = Sy;
	Scaling_matrix[1][2] = 0;
	Scaling_matrix[2][0] = 0;
	Scaling_matrix[2][1] = 0;
	Scaling_matrix[2][2] = 1;
	
        for(i1=0;i1<10;i1++)
	for(j1=0;j1<10;j1++)
		Scaling_result[i1][j1] = 0;
	for(i1=0;i1<r1;i1++)
	for(j1=0;j1<c2;j1++)
	for(k1=0;k1<c1;k1++)
		Scaling_result[i1][j1] = Scaling_result[i1][j1]+(p[i1][k1] * Scaling_matrix[k1][j1]);

	cout<<"\n\nPolygon after Scaling : ";
	draw_polyfloat(Scaling_result,n);
}

void POLYGON :: shearing(int p[][10],int n)
{
	float Sx,Sy,type; int i,j;
        int i1,j1,k1,r1,c1,c2;
        r1=n;c1=c2=3;
	for(i=0;i<3;i++)
	for(j=0;j<3;j++)
	{
		if(i == j)
			Shearing_matrix[i][j] = 1;
		else
			Shearing_matrix[i][j] = 0;
	}
	cout << "\n\n* * * * Shearing Types * * * *";
	cout << "\n\n1.X-Direction Shear \n\n2.Y-Direction Shear ";
	cout << "\n\nEnter your choice(1-2) : ";
	cin >> type;
	if(type == 1)
	{
		cout << "\n\nEnter X-Shear Sx : ";
		cin >> Sx;
		Shearing_matrix[1][0] = Sx;
	}
	else
	{
		cout << "\n\nEnter Y-Shear Sy : ";
		cin >> Sy;
		Shearing_matrix[0][1] = Sy;
	}
	
        
        for(i1=0;i1<10;i1++)
	for(j1=0;j1<10;j1++)
	Shearing_result[i1][j1] = 0;
	for(i1=0;i1<r1;i1++)
	for(j1=0;j1<c2;j1++)
	for(k1=0;k1<c1;k1++)
		Shearing_result[i1][j1] = Shearing_result[i1][j1]+(p[i1][k1] * Shearing_matrix[k1][j1]);

	cout << "\n\nPolygon after Shearing : ";
	draw_polyfloat(Shearing_result,n);
}

void POLYGON :: reflection(int p[][10],int n)
{
	int type,i,j;
      
        int i1,j1,k1,r1,c1,c2;
  r1=n;c1=c2=3;
	cout << "\n\n* * * * Reflection Types * * * *";
	cout << "\n\n1.About X-Axis \n\n2.About Y-Axis \n\n3.About Origin\n\n4.About Line y = x \n\n5.About Line y = -x \n\nEnter your choice(1-5) : ";
	cin >> type;
	for(i=0;i<3;i++)
	for(j=0;j<3;j++)
	{
			Reflection_matrix[i][j] = 0;
	}
	switch(type)
	{
		case 1:
			Reflection_matrix[0][0] = 1;
                        Reflection_matrix[1][1] = -1;
                        Reflection_matrix[2][2] = 1;
			break;
		case 2:
			Reflection_matrix[0][0] = -1;
                        Reflection_matrix[1][1] = 1;
                        Reflection_matrix[2][2] = 1;
			break;
		case 3:
			Reflection_matrix[0][0] = -1;
                        Reflection_matrix[1][1] = -1;
                        Reflection_matrix[2][2] = 1;
			break;
		case 4:
			Reflection_matrix[0][1] = 1;
			Reflection_matrix[1][0] = 1;
			Reflection_matrix[2][2] = 1;
			break;
		case 5:
			Reflection_matrix[0][1] = -1;
			Reflection_matrix[1][0] = -1;
			Reflection_matrix[2][2] = 1;
			break;
	}
	
        for(i1=0;i1<10;i1++)
	for(j1=0;j1<10;j1++)
		Reflection_result[i1][j1] = 0;
	for(i1=0;i1<r1;i1++)
	for(j1=0;j1<c2;j1++)
	for(k1=0;k1<c1;k1++)
		Reflection_result[i1][j1] = Reflection_result[i1][j1]+(p[i1][k1] * Reflection_matrix[k1][j1]);

	cout << "\n\n\t\tPolygon after Reflection : ";
//cout << "\n\n\t\tPolygon after Rotationâ€¦";
        for(i=0;i<n;i++)
	{
		cout<<"\n";
		for(int j=0;j<3;j++)
		{
			cout<<Reflection_result[i][j]<<"\t\t";
		}
	}
	draw_poly(Reflection_result,n);
//closegraph();
}



int main()
{
	int ch,n,p[10][10];
	POLYGON p1;
	cout<<"\n\n* * * * 2-D TRANSFORMATION * * * *";
	n= p1.accept_poly(p);
	
	cout <<"\n\nOriginal Polygon : ";
	p1.draw_poly(p,n);
	do
	{
		
                int ch;
	        cout<<"\n\n* * * * 2-D TRANSFORMATION * * * *";
		cout<<"\n\n1.Translation \n\n2.Scaling \n\n3.Rotation \
	        \n\n4.Reflection \n\n5.Shearing \n\n6.Exit";
	        cout<<"\n\nEnter your choice(1-6) : ";
	        cin>>ch;
	   
		switch(ch)
		{
			case 1:
				
				p1.translation(p,n);
				break;

			case 2:
				
				p1.scaling(p,n);
				break;

			case 3:
				
				p1.rotation(p,n);
				break;

			case 4:
				
				p1.reflection(p,n);
				break;

			case 5:
				
				p1.shearing(p,n);
				break;

			case 6:
				exit(0);
		}
	}while(1);
	return 0;
}

/==============================================================================================

Exp 5 : Write C++ program to generate snowflake using concept of fractals.


#include <iostream>
#include <math.h>
#include <graphics.h>

using namespace std;

class KochCurve {
public:
    void koch(int it, int x1, int y1, int x5, int y5) {
        int x2, y2, x3, y3, x4, y4;
        int dx, dy;

        if (it == 0) {
            line(x1, y1, x5, y5);
        } else {
            delay(10);
            dx = (x5 - x1) / 3;
            dy = (y5 - y1) / 3;
            x2 = x1 + dx;
            y2 = y1 + dy;
            x3 = (int)(0.5 * (x1 + x5) + sqrt(3) * (y1 - y5) / 6);
            y3 = (int)(0.5 * (y1 + y5) + sqrt(3) * (x5 - x1) / 6);
            x4 = 2 * dx + x1;
            y4 = 2 * dy + y1;

            koch(it - 1, x1, y1, x2, y2);
            koch(it - 1, x2, y2, x3, y3);
            koch(it - 1, x3, y3, x4, y4);
            koch(it - 1, x4, y4, x5, y5);
        }
    }
};

int main() {
    KochCurve k;
    int it;
    cout << "Enter Number Of Iterations : " << endl;
    cin >> it;

    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);

    k.koch(it, 150, 20, 20, 280);
    k.koch(it, 280, 280, 150, 20);
    k.koch(it, 20, 280, 280, 280);

    getch();
    closegraph();
    return 0;
}

