#include<iostream>
#include<stdlib.h>
#include<math.h>
#include<graphics.h>
using namespace std;

int sign(float x) {
    if (x < 0)
        return -1;
    else if (x > 0)
        return 1;
    else
        return 0;
}

void drawline(int x1, int y1, int x2, int y2) {
    float dx, dy, len, xnew, ynew, x, y;

    dx = abs(x2 - x1);
    dy = abs(y2 - y1);

    if (dx > dy)
        len = dx;
    else
        len = dy;

    xnew = dx / len;
    ynew = dy / len;

    x = x1 + 0.5;
    y = y1 + 0.5;

    for (int i = 1; i <= len; i++) {
        putpixel(x, y, 10);

        if (sign(x2 - x1) == 1)
            x = x + xnew;
        else
            x = x - xnew;

        if (sign(y2 - y1) == 1)
            y = y + ynew;
        else
            y = y - ynew;
    }
}

// Other functions (mh, md, mv) remain the same...

int main() {
    int gd = DETECT, gm;

    initgraph(&gd, &gm, NULL);
    drawline(100, 250, 300, 250);
    drawline(100, 250, 200, 76);
    drawline(200, 76, 300, 250);
    drawCircle(200, 193, 57);
    // Other drawline and drawCircle calls are commented out as per the provided code.

    getch();
    delay(2000);
    closegraph();
    return 0;
}



//or




/*
4. Write a c++ program for drawing a line using
DDA and Bresahnams Line Drawing Algorithm
*/

/*
#include<iostream.h>
#include<graphics.h>
#include<math.h>

int sign(int x)
{
if(x<0)
return -1;
else if(x>0)
return 1;
else
return 0;
}
void bline(int x1,int y1,int x2,int y2,int col)
{
int dx,dy,e,x,y,i=1;
dx=x2-x1;
dy=y2-y1;
x=x1;
y=y1;
e=2*dy-dx;
while(i<=dx)
{
while(e>=0)
{
y++;
e=e-2*dx;
}

x++;
e=e+2*dy;
putpixel(x,y,col);
i++;
}
}
void ddaline(int x1,int y1,int x2,int y2,int
col)
{
int x,y,len,i;
float dx,dy;
if(x1==x2 && y1==y2)
putpixel(x1,y1,col);
else
{
dx=abs(x2-x1);
dy=abs(y2-y1);
if(dx&gt;dy)
len=dx;
else
len=dy;
dx=(x2-x1)/len;
dy=(y2-y1)/len;
x=x1+0.5*sign(dx);
y=y1+0.5*sign(dy);
i=1;
while(i<len)
{
putpixel(x,y,col);
x=x+dx;
y=y+dy;
i++;
}
}
}
int main()

{
int ch,col,x1,x2,y1,y2;
cout<<"\n------------MENU------------\n"
cout<<"1.USING DDA\n";
cout<<"2.Using Bresahnams\n";
cout<<"\nEnter your choice : \n";
cin>>ch;
cout<<"\nEnter points x1,y1,x2,y2 : \n";
cin>>x1>>y1>>x2>>y2;
cout<<"\nEnter colour 1-15 : \n";
cin>>col;
if(col>15||col<1)
col=1;
int gd=DETECT,gm;
initgraph(&gd,&gm,”c:\\turboc3\\bgi”);
switch(ch)
{
case 1:
ddaline(x1,y1,x2,y2,col);
ddaline(300,300,400,300,col);
ddaline(300,300,300,400,col);
ddaline(300,400,400,400,col);
ddaline(400,400,400,300,col);
break;
case 2:
bline(x1,y1,x2,y2,col);
ddaline(300,300,400,300,col);
ddaline(300,300,300,400,col);
ddaline(300,400,400,400,col);
ddaline(400,400,400,300,col);
break;
default :
cout<<"\nEnter valid choice :\n";
}

getch();
closegraph();
return 0;
}
/*


//or

/*


#include<iostream>
#include<graphics.h>
#include<math.h>

int sign(int x) {
    if(x<0)
        return -1;
    else if(x>0)
        return 1;
    else
        return 0;
}

void bline(int x1, int y1, int x2, int y2, int col) {
    int dx, dy, e, x, y, i=1;
    dx = x2 - x1;
    dy = y2 - y1;
    x = x1;
    y = y1;
    e = 2 * dy - dx;
    while(i <= dx) {
        while(e >= 0) {
            y++;
            e = e - 2 * dx;
        }
        x++;
        e = e + 2 * dy;
        putpixel(x, y, col);
        i++;
    }
}

void ddaline(int x1, int y1, int x2, int y2, int col) {
    int x, y, len, i;
    float dx, dy;
    if(x1 == x2 && y1 == y2)
        putpixel(x1, y1, col);
    else {
        dx = abs(x2 - x1);
        dy = abs(y2 - y1);
        if(dx > dy)
            len = dx;
        else
            len = dy;
        dx = (x2 - x1) / len;
        dy = (y2 - y1) / len;
        x = x1 + 0.5 * sign(dx);
        y = y1 + 0.5 * sign(dy);
        i = 1;
        while(i < len) {
            putpixel(x, y, col);
            x = x + dx;
            y = y + dy;
            i++;
        }
    }
}

int main() {
    int ch, col, x1, x2, y1, y2;
    std::cout << "\n------------MENU------------\n";
    std::cout << "1.USING DDA\n";
    std::cout << "2.Using Bresenham's\n";
    std::cout << "\nEnter your choice : \n";
    std::cin >> ch;
    std::cout << "\nEnter points x1,y1,x2,y2 : \n";
    std::cin >> x1 >> y1 >> x2 >> y2;
    std::cout << "\nEnter colour 1-15 : \n";
    std::cin >> col;
    if(col > 15 || col < 1)
        col = 1;

    int gd = DETECT, gm;
    initgraph(&gd, &gm, "c:\\turboc3\\bgi");

    switch(ch) {
        case 1:
            ddaline(x1, y1, x2, y2, col);
            ddaline(300, 300, 400, 300, col);
            ddaline(300, 300, 300, 400, col);
            ddaline(300, 400, 400, 400, col);
            ddaline(400, 400, 400, 300, col);
            break;
        case 2:
            bline(x1, y1, x2, y2, col);
            ddaline(300, 300, 400, 300, col);
            ddaline(300, 300, 300, 400, col);
            ddaline(300, 400, 400, 400, col);
            ddaline(400, 400, 400, 300, col);
            break;
        default :
            std::cout << "\nEnter valid choice :\n";
    }

    getch();
    closegraph();
    return 0;
}

/*
